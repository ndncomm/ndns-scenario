{"name":"Ndns-scenario","tagline":"Template for running simulation scenarios in ndnSIM","body":"## Problem\r\n\r\nResearchers need to evaluate their NDN applications and protocols. ndnSIM is one popular option for evaluations with a many nodes. However, ndnSIM applications are inherently different from \"real world\" implementations. Users must base their models on simulation constructs (e.g. the simulator's scheduler) rather than normal application constructs (e.g. boost asio scheduling). This process can be painful and essentially requires researchers to implement their application twice: once for real world usage and again for evaluation within ndnSIM.\r\n\r\nThe ndnSIM team is attempting to ease the burden on researchers by documenting how applications can modified to run inside of the simulator. This project aims to improve the team's porting knowledge by bringing an important application, NDNS, into ndnSIM.\r\n\r\n## Approach\r\n\r\nWe created a new ndnSIM scenario template that uses NDNS. NDNS itself is not a monolithic application. The NDNS project consists of:\r\n\r\n* The NDNS daemon\r\n* command line tools for managing NDNS' database (i.e. zones and RRs)\r\n* NDNS dig client\r\n\r\nndnSIM applications cannot have a \"main\" function and instead need to inherent from an ns-3 provided Application class. Consequently, we need to refactor the command line tools and dig client to separate their \"main\"s from their functionality (e.g. creating a zone). The NDNS daemon is already implemented as a library with a separate tool for running it and therefore required minimal changes in this respect.\r\n\r\nndnSIM also requires the use of a special, dummy, keychain to avoid serious performance issues from using a real, file/OS TPM, backed key storage (e.g. OS X Keychain). Similarly, applications must use ndnSIM provided Faces rather than normal NDN library ones. This means that applications must be modular in design and accept an external keychain and Face for their usage.\r\n\r\n## Progress\r\n\r\nWe are successfully able to create an NDNS instance, initialize it with zones, and query it with the NDNS dig client. We learned that NDNS and is associated tools are difficult to port to ndnSIM because they are not very modular (e.g. many tools were entirely implemented in their \"main\" function).\r\n\r\n## Team\r\n\r\n* Spyridon (Spyros) Mastorakis\r\n* Muktadir R Chowdhury\r\n* Steve DiBenedetto\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}