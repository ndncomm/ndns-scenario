{"name":"Ndns-scenario","tagline":"Template for running simulation scenarios in ndnSIM","body":"Include: team members,  , future TODOs, and opportunities for future collaboration.\r\n\r\n## Problem\r\n\r\nResearchers need to evaluate their NDN applications and protocols. ndnSIM is one popular option for evaluations with a many nodes. However, ndnSIM applications are inherently different from \"real world\" implementations. Users must base their models on simulation constructs (e.g. the simulator's scheduler) rather than normal application constructs (e.g. boost asio scheduling). This process can be painful and essentially requires researchers to implement their application twice: once for real world usage and again for evaluation within ndnSIM.\r\n\r\nThe ndnSIM team is attempting to ease the burden on researchers by documenting how applications can modified to run inside of the simulator. This project aims to improve the team's porting knowledge by bringing an important application, NDNS, into ndnSIM.\r\n\r\n## Approach\r\n\r\nWe created a new ndnSIM scenario template that uses NDNS. NDNS itself is not a monolithic application. The NDNS project consists of:\r\n\r\n* The NDNS daemon\r\n* command line tools for managing NDNS' database (i.e. zones and RRs)\r\n* NDNS dig client\r\n\r\nndnSIM applications cannot have a \"main\" function and instead need to inherent from an ns-3 provided Application class. Consequently, we need to refactor the command line tools and dig client to separate their \"main\"s from their functionality (e.g. creating a zone). The NDNS daemon is already implemented as a library with a separate tool for running it and therefore required minimal changes in this respect.\r\n\r\nndnSIM also requires the use of a special, dummy, keychain to avoid serious performance issues from using a real, file/OS TPM, backed key storage (e.g. OS X Keychain). Similarly, applications must use ndnSIM provided Faces rather than normal NDN library ones. This means that applications must be modular in design and accept an external keychain and Face for their usage.\r\n\r\n## Progress\r\n\r\n\r\n\r\n## Team\r\n\r\n\r\n### Welcome to GitHub Pages.\r\nThis automatic page generator is the easiest way to create beautiful pages for all of your projects. Author your page content here [using GitHub Flavored Markdown](https://guides.github.com/features/mastering-markdown/), select a template crafted by a designer, and publish. After your page is generated, you can check out the new `gh-pages` branch locally. If you’re using GitHub Desktop, simply sync your repository and you’ll see the new branch.\r\n\r\n### Designer Templates\r\nWe’ve crafted some handsome templates for you to use. Go ahead and click 'Continue to layouts' to browse through them. You can easily go back to edit your page before publishing. After publishing your page, you can revisit the page generator and switch to another theme. Your Page content will be preserved.\r\n\r\n### Creating pages manually\r\nIf you prefer to not use the automatic generator, push a branch named `gh-pages` to your repository to create a page manually. In addition to supporting regular HTML content, GitHub Pages support Jekyll, a simple, blog aware static site generator. Jekyll makes it easy to create site-wide headers and footers without having to copy them across every page. It also offers intelligent blog support and other advanced templating features.\r\n\r\n### Authors and Contributors\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor’s GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out our [documentation](https://help.github.com/pages) or [contact support](https://github.com/contact) and we’ll help you sort it out.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}